from flask import Flask, request, jsonify, send_from_directory
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from flask_cors import CORS
import os
import random

app = Flask(__name__)
CORS(app)

# Configuraci√≥n para servir archivos est√°ticos
@app.route('/')
def serve_frontend():
    return send_from_directory('../frontend', 'index.html')

@app.route('/<path:filename>')
def serve_static(filename):
    return send_from_directory('../frontend', filename)

# Entrenamiento simple con datos b√°sicos
vectorizer = CountVectorizer()

# Ejemplos b√°sicos de categor√≠as acad√©micas
textos_matematicas = [
    "necesito ayuda con √°lgebra", "no entiendo las ecuaciones", "me cuesta geometr√≠a",
    "ayuda con c√°lculo", "problemas con matem√°ticas", "dificultades en estad√≠stica"
]

textos_fisica = [
    "no entiendo la mec√°nica", "problemas con fuerzas", "cinem√°tica es dif√≠cil",
    "ayuda con f√≠sica", "problemas de f√≠sica", "no entiendo f√≠sica"
]

textos_quimica = [
    "tabla peri√≥dica", "enlaces qu√≠micos", "reacciones qu√≠micas",
    "ayuda con qu√≠mica", "problemas de qu√≠mica", "no entiendo qu√≠mica"
]

textos_programacion = [
    "aprender a programar", "algoritmos dif√≠ciles", "estructuras de datos",
    "ayuda con programaci√≥n", "problemas de c√≥digo", "no entiendo programaci√≥n"
]

textos_desercion = [
    # Frases CLARAMENTE negativas de abandono
    "quiero dejar la escuela", "no tengo motivaci√≥n para nada", "me siento muy cansado de estudiar",
    "ya no quiero ir a clases nunca", "voy a abandonar mis estudios", "no me sirve estudiar esto",
    "odio ir a la universidad", "no aguanto m√°s", "me quiero salir definitivamente",
    "esto no es para m√≠", "quiero renunciar", "no puedo seguir estudiando",
    "voy a dejar todo", "no soporto m√°s", "quiero abandonar todo"
]

textos_motivacion = [
    # Frases CLARAMENTE positivas sobre la escuela
    "me gusta la escuela", "me gusta estudiar mucho", "quiero mejorar mis notas",
    "busco motivaci√≥n para estudiar", "c√≥mo ser mejor estudiante", "t√©cnicas de estudio efectivas",
    "quiero seguir estudiando siempre", "me encanta aprender", "disfruto ir a clases",
    "me gusta mi carrera", "estoy feliz estudiando", "me gusta venir a la universidad",
    "quiero ser buen estudiante", "me motiva estudiar", "me siento bien en la escuela",
    "amo mi carrera", "me gusta mucho la universidad", "disfruto aprendiendo",
    "me encanta ir a clases", "quiero destacar en mis estudios", "me siento motivado",
    "estoy contento con mis estudios", "me gusta todo de la escuela"
]

textos_positivos_escuela = [
    # Comentarios positivos generales sobre la experiencia escolar
    "la escuela est√° bien", "me gusta venir aqu√≠", "la universidad es buena",
    "estoy bien en la escuela", "me siento c√≥modo aqu√≠", "la escuela es interesante",
    "me agrada la universidad", "disfruto estar aqu√≠", "la escuela me parece bien",
    "me gusta el ambiente", "la universidad est√° padre", "me siento a gusto",
    "la escuela es genial", "me divierte estar aqu√≠", "me gusta el campus"
]

# Combinar todos los textos
todos_los_textos = (textos_matematicas + textos_fisica + textos_quimica + 
                   textos_programacion + textos_desercion + textos_motivacion + 
                   textos_positivos_escuela)

todas_las_etiquetas = (["matematicas"] * len(textos_matematicas) +
                      ["fisica"] * len(textos_fisica) +
                      ["quimica"] * len(textos_quimica) +
                      ["programacion"] * len(textos_programacion) +
                      ["desercion"] * len(textos_desercion) +
                      ["motivacion"] * len(textos_motivacion) +
                      ["positivo"] * len(textos_positivos_escuela))

# Entrenar modelo con mejor configuraci√≥n
X = vectorizer.fit_transform(todos_los_textos)
y = todas_las_etiquetas

# Usar configuraci√≥n m√°s precisa para el modelo
model = LogisticRegression(max_iter=1000, random_state=42, C=1.0)
model.fit(X, y)

print(f"Modelo entrenado con {len(todos_los_textos)} ejemplos y {len(set(y))} categor√≠as")

# Consejos profesionales con recursos espec√≠ficos
consejos = {
    "matematicas": [
        "üìö CURSOS RECOMENDADOS: Inscr√≠bete en el curso 'Fundamentos de √Ålgebra' de Khan Academy (gratuito) y 'C√°lculo Diferencial' en Coursera por Universidad UNAM. Contacta al Tutor de Matem√°ticas del Centro de Apoyo Acad√©mico de tu universidad.",
        "üë®‚Äçüè´ APOYO PERSONALIZADO: Solicita tutor√≠a con estudiantes de Ingenier√≠a de semestres avanzados (programa peer tutoring). El Dr. Luis Garc√≠a del Departamento de Matem√°ticas ofrece asesor√≠as los martes y jueves de 2-4 PM.",
        "üíª RECURSOS DIGITALES: Usa Wolfram Alpha para verificar c√°lculos y Photomath para resolver paso a paso. El libro '√Ålgebra de Baldor' est√° disponible gratis en la biblioteca digital universitaria.",
        "üéØ PLAN DE ESTUDIO: Practica 30 min diarios con ejercicios graduales. √önete al C√≠rculo de Estudio de Matem√°ticas que se re√∫ne mi√©rcoles 4 PM en el aula 205. Profesora Mar√≠a Rodr√≠guez coordina.",
        "üèÜ CERTIFICACI√ìN: Considera el curso 'Matem√°ticas para Ciencias' del Tecnol√≥gico de Monterrey en edX (con certificado). Te dar√° una base s√≥lida y reconocimiento acad√©mico adicional."
    ],
    "fisica": [
        "üî¨ LABORATORIOS ESPECIALIZADOS: Solicita acceso al Laboratorio de F√≠sica B√°sica fuera de horario de clase. El Ing. Roberto Mart√≠nez (Ext. 3421) coordina sesiones pr√°cticas adicionales s√°bados 9-12.",
        "üìñ CURSOS COMPLEMENTARIOS: 'F√≠sica Universitaria' de UC Berkeley en edX y 'Mec√°nica Cl√°sica' de MIT OpenCourseWare. Para refuerzo presencial, el C√≠rculo de F√≠sica se re√∫ne viernes 3 PM.",
        "üé¨ RECURSOS AUDIOVISUALES: Canal de YouTube 'MinutoDeF√≠sica' y simuladores PhET de Universidad de Colorado. La Dra. Ana L√≥pez ofrece tutor√≠as personalizadas lunes y mi√©rcoles 1-3 PM.",
        "üìä APOYO ACAD√âMICO: El programa 'Nivelaci√≥n en Ciencias Exactas' del Departamento de F√≠sica ofrece cursos remediales gratuitos. Inscripciones en Servicios Escolares.",
        "üåü PROYECTO APLICADO: √önete al Grupo de Divulgaci√≥n Cient√≠fica dirigido por el Dr. Carlos Hern√°ndez. Aplicar f√≠sica en proyectos reales mejora comprensi√≥n y curr√≠culum."
    ],
    "quimica": [
        "‚öóÔ∏è LABORATORIO ABIERTO: El Laboratorio de Qu√≠mica General ofrece sesiones libres s√°bados 10-1 PM. Contacta a la Q.F.B. Patricia Morales (Ext. 2890) para reservar equipo especializado.",
        "üß™ CURSOS PROFESIONALES: 'Qu√≠mica General' de Universidad de Kentucky en Coursera y 'Organic Chemistry' de Yale (gratuito). Para apoyo presencial, Dr. Miguel √Ångel S√°nchez, cub√≠culo 12B.",
        "üíª SOFTWARE ESPECIALIZADO: Aprende ChemSketch (gratis) y MarvinSketch para estructura molecular. Centro de C√≥mputo ofrece taller 'Qu√≠mica Computacional' cada mes.",
        "üë• GRUPOS DE ESTUDIO: C√≠rculo de Qu√≠mica Org√°nica dirigido por estudiantes de Ingenier√≠a Qu√≠mica, jueves 5 PM, aula 108. Resuelven problemas complejos en equipo.",
        "üè≠ VINCULACI√ìN INDUSTRIAL: Participa en visitas a plantas qu√≠micas organizadas por Vinculaci√≥n Universitaria. Observar procesos reales consolida conocimiento te√≥rico."
    ],
    "programacion": [
        "üíº CERTIFICACIONES PROFESIONALES: Google IT Automation with Python (Coursera), Microsoft Azure Fundamentals y AWS Cloud Practitioner (gratuitas para estudiantes). Centro de Vinculaci√≥n Laboral te apoya.",
        "üë®‚Äçüíª MENTORES ESPECIALIZADOS: Contacta a egresados en el programa Alumni Mentorship. El Ing. Fernando L√≥pez (Google M√©xico) ofrece mentor√≠a virtual mensual para estudiantes destacados.",
        "üöÄ PROYECTOS COLABORATIVOS: √önete a los cap√≠tulos estudiantiles ACM e IEEE. Participan en hackathons y tienen biblioteca especializada en el edificio de Ingenier√≠a.",
        "üìö CURSOS AVANZADOS: 'CS50 Introduction to Computer Science' de Harvard (gratis), 'Python for Data Science' de IBM. El Centro de C√≥mputo ofrece cursos presenciales.",
        "üè¢ PR√ÅCTICAS PROFESIONALES: Programa de Internships con empresas tech locales. Oficina de Pr√°cticas Profesionales coordina con Microsoft, IBM y startups locales."
    ],
    "desercion": [
        "üè• URGENTE - BIENESTAR ESTUDIANTIL: Contacta HOY al Departamento de Bienestar Estudiantil (Ext. 2500, edificio administrativo 2do piso). Psic. Laura Jim√©nez especializada en crisis acad√©micas.",
        "üìã ASESOR√çA ACAD√âMICA INMEDIATA: Tu Coordinador Acad√©mico puede evaluar opciones: baja temporal, reducci√≥n de materias, cambio de modalidad. Agenda cita en Servicios Escolares.",
        "üí∞ APOYO FINANCIERO: Programa de Becas de Emergencia y trabajo-estudio disponible. Lic. Carmen Flores (Oficina de Becas) eval√∫a casos especiales. Tambi√©n cr√©dito educativo FONACOT.",
        "üéØ ORIENTACI√ìN VOCACIONAL: Centro de Orientaci√≥n puede aplicar test vocacional y de intereses (gratuito). Confirma si tu carrera actual se alinea con tus aptitudes reales.",
        "üìû L√çNEA DE APOYO 24/7: Universidad cuenta con l√≠nea de crisis estudiantil: 800-APOYO-U. Tambi√©n grupo de WhatsApp 'Red de Apoyo Estudiantil' moderado por Trabajo Social."
    ],
    "motivacion": [
        "üèÜ PROGRAMA DE EXCELENCIA: Inscr√≠bete en el Programa de Estudiantes Sobresalientes que ofrece mentor√≠as, conferencias exclusivas y networking con profesionales exitosos.",
        "üìà DESARROLLO DE HABILIDADES: Curso 'T√©cnicas de Estudio Avanzadas' del Centro de Desarrollo Estudiantil. Tambi√©n taller 'Liderazgo Universitario' con reconocimiento curricular.",
        "üåü SOCIEDADES ACAD√âMICAS: √önete al Consejo Estudiantil o sociedad de alumnos de tu carrera. Liderazgo estudiantil desarrolla competencias valoradas por empleadores.",
        "üéØ COACHING ACAD√âMICO: Programa de coaching personalizado con egresados exitosos. 6 sesiones gratuitas enfocadas en metas acad√©micas y desarrollo profesional.",
        "üöÄ OPORTUNIDADES ESPECIALES: Post√∫late a programas de intercambio, concursos acad√©micos y proyectos de investigaci√≥n con profesores. Fortalecen perfil acad√©mico significativamente."
    ],
    "positivo": [
        "üåü EMBAJADOR ESTUDIANTIL: Con tu actitud positiva, considera ser Embajador Estudiantil para orientar a nuevos estudiantes. Programa coordinado por Relaciones Estudiantiles.",
        "üéì ACTIVIDADES DE LIDERAZGO: Participa en el Consejo Estudiantil o comit√©s acad√©micos. Tu perspectiva positiva puede influir en mejoras para toda la comunidad universitaria.",
        "üì¢ TESTIMONIOS INSPIRADORES: Comparte tu experiencia positiva en eventos de orientaci√≥n para nuevos estudiantes. Centro de Comunicaci√≥n busca historias estudiantiles exitosas.",
        "üèÖ RECONOCIMIENTOS: Post√∫late a programas de reconocimiento como 'Estudiante del Mes' o 'Orgullo Universitario'. Tu actitud positiva merece ser destacada institucionalmente.",
        "ü§ù MENTORING: Considera ser mentor de estudiantes de primer semestre. Tu experiencia positiva puede ayudar a otros a adaptarse mejor a la vida universitaria."
    ]
}

@app.route("/clasificar", methods=["POST"])
def clasificar():
    try:
        data = request.json
        texto = data.get("texto", "").lower()
        
        # Verificaci√≥n adicional para palabras clave positivas/negativas
        palabras_muy_positivas = ["me gusta", "me encanta", "amo", "disfruto", "genial", "bueno", "bien", "contento", "feliz"]
        palabras_muy_negativas = ["odio", "no aguanto", "quiero dejar", "abandonar", "salir", "renunciar", "no soporto"]
        
        # Contar palabras positivas y negativas
        positivas = sum(1 for palabra in palabras_muy_positivas if palabra in texto)
        negativas = sum(1 for palabra in palabras_muy_negativas if palabra in texto)
        
        # Clasificaci√≥n por ML
        X_test = vectorizer.transform([texto])
        pred = model.predict(X_test)[0]
        probabilidades = model.predict_proba(X_test)[0]
        confianza = max(probabilidades)
        
        # Correcci√≥n inteligente: si hay m√°s palabras positivas y predice deserci√≥n, corregir
        if pred == "desercion" and positivas > negativas and positivas > 0:
            pred = "positivo"
            confianza = 0.85
        
        # Si es claramente positivo sobre la escuela, asegurar clasificaci√≥n correcta
        if any(frase in texto for frase in ["me gusta la escuela", "me gusta estudiar", "me gusta la universidad"]):
            pred = "positivo"
            confianza = 0.90
            
        # Elegir un consejo seg√∫n categor√≠a
        consejo = random.choice(consejos.get(pred, consejos["motivacion"]))
        
        # Respuesta m√°s natural
        respuestas_naturales = {
            "matematicas": "Veo que necesitas ayuda con matem√°ticas",
            "fisica": "Identifico una consulta sobre f√≠sica", 
            "quimica": "Detecto que tienes dudas de qu√≠mica",
            "programacion": "Reconozco una pregunta sobre programaci√≥n",
            "desercion": "Noto que est√°s pasando por un momento dif√≠cil con tus estudios",
            "motivacion": "¬°Qu√© bueno verte tan motivado con tus estudios!",
            "positivo": "¬°Me alegra escuchar comentarios tan positivos sobre la escuela!"
        }
        
        respuesta = respuestas_naturales.get(pred, f"He identificado tu consulta sobre: {pred}")
        
        return jsonify({
            "respuesta": respuesta,
            "consejo": consejo,
            "categoria": pred,
            "confianza": f"{confianza:.0%}"
        })
    
    except Exception as e:
        print(f"Error: {e}")
        return jsonify({
            "respuesta": "He recibido tu consulta acad√©mica.",
            "consejo": "Te recomiendo consultar con tu profesor o tutor acad√©mico."
        })

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)